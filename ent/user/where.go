// Code generated by ent, DO NOT EDIT.

package user

import (
	"fiber-be-template/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// NormalizedUsername applies equality check predicate on the "normalized_username" field. It's identical to NormalizedUsernameEQ.
func NormalizedUsername(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNormalizedUsername, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// NormalizedEmail applies equality check predicate on the "normalized_email" field. It's identical to NormalizedEmailEQ.
func NormalizedEmail(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNormalizedEmail, v))
}

// EmailConfirmed applies equality check predicate on the "email_confirmed" field. It's identical to EmailConfirmedEQ.
func EmailConfirmed(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailConfirmed, v))
}

// PasswordHash applies equality check predicate on the "password_hash" field. It's identical to PasswordHashEQ.
func PasswordHash(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordHash, v))
}

// ConcurrencyStamp applies equality check predicate on the "concurrency_stamp" field. It's identical to ConcurrencyStampEQ.
func ConcurrencyStamp(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldConcurrencyStamp, v))
}

// SecurityStamp applies equality check predicate on the "security_stamp" field. It's identical to SecurityStampEQ.
func SecurityStamp(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSecurityStamp, v))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberConfirmed applies equality check predicate on the "phone_number_confirmed" field. It's identical to PhoneNumberConfirmedEQ.
func PhoneNumberConfirmed(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneNumberConfirmed, v))
}

// TwoFactorEnabled applies equality check predicate on the "two_factor_enabled" field. It's identical to TwoFactorEnabledEQ.
func TwoFactorEnabled(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTwoFactorEnabled, v))
}

// LockoutEnabled applies equality check predicate on the "lockout_enabled" field. It's identical to LockoutEnabledEQ.
func LockoutEnabled(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLockoutEnabled, v))
}

// AccessFailedCount applies equality check predicate on the "access_failed_count" field. It's identical to AccessFailedCountEQ.
func AccessFailedCount(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAccessFailedCount, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// NormalizedUsernameEQ applies the EQ predicate on the "normalized_username" field.
func NormalizedUsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNormalizedUsername, v))
}

// NormalizedUsernameNEQ applies the NEQ predicate on the "normalized_username" field.
func NormalizedUsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNormalizedUsername, v))
}

// NormalizedUsernameIn applies the In predicate on the "normalized_username" field.
func NormalizedUsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNormalizedUsername, vs...))
}

// NormalizedUsernameNotIn applies the NotIn predicate on the "normalized_username" field.
func NormalizedUsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNormalizedUsername, vs...))
}

// NormalizedUsernameGT applies the GT predicate on the "normalized_username" field.
func NormalizedUsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNormalizedUsername, v))
}

// NormalizedUsernameGTE applies the GTE predicate on the "normalized_username" field.
func NormalizedUsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNormalizedUsername, v))
}

// NormalizedUsernameLT applies the LT predicate on the "normalized_username" field.
func NormalizedUsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNormalizedUsername, v))
}

// NormalizedUsernameLTE applies the LTE predicate on the "normalized_username" field.
func NormalizedUsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNormalizedUsername, v))
}

// NormalizedUsernameContains applies the Contains predicate on the "normalized_username" field.
func NormalizedUsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNormalizedUsername, v))
}

// NormalizedUsernameHasPrefix applies the HasPrefix predicate on the "normalized_username" field.
func NormalizedUsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNormalizedUsername, v))
}

// NormalizedUsernameHasSuffix applies the HasSuffix predicate on the "normalized_username" field.
func NormalizedUsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNormalizedUsername, v))
}

// NormalizedUsernameEqualFold applies the EqualFold predicate on the "normalized_username" field.
func NormalizedUsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNormalizedUsername, v))
}

// NormalizedUsernameContainsFold applies the ContainsFold predicate on the "normalized_username" field.
func NormalizedUsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNormalizedUsername, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// NormalizedEmailEQ applies the EQ predicate on the "normalized_email" field.
func NormalizedEmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNormalizedEmail, v))
}

// NormalizedEmailNEQ applies the NEQ predicate on the "normalized_email" field.
func NormalizedEmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNormalizedEmail, v))
}

// NormalizedEmailIn applies the In predicate on the "normalized_email" field.
func NormalizedEmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNormalizedEmail, vs...))
}

// NormalizedEmailNotIn applies the NotIn predicate on the "normalized_email" field.
func NormalizedEmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNormalizedEmail, vs...))
}

// NormalizedEmailGT applies the GT predicate on the "normalized_email" field.
func NormalizedEmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNormalizedEmail, v))
}

// NormalizedEmailGTE applies the GTE predicate on the "normalized_email" field.
func NormalizedEmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNormalizedEmail, v))
}

// NormalizedEmailLT applies the LT predicate on the "normalized_email" field.
func NormalizedEmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNormalizedEmail, v))
}

// NormalizedEmailLTE applies the LTE predicate on the "normalized_email" field.
func NormalizedEmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNormalizedEmail, v))
}

// NormalizedEmailContains applies the Contains predicate on the "normalized_email" field.
func NormalizedEmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNormalizedEmail, v))
}

// NormalizedEmailHasPrefix applies the HasPrefix predicate on the "normalized_email" field.
func NormalizedEmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNormalizedEmail, v))
}

// NormalizedEmailHasSuffix applies the HasSuffix predicate on the "normalized_email" field.
func NormalizedEmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNormalizedEmail, v))
}

// NormalizedEmailEqualFold applies the EqualFold predicate on the "normalized_email" field.
func NormalizedEmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNormalizedEmail, v))
}

// NormalizedEmailContainsFold applies the ContainsFold predicate on the "normalized_email" field.
func NormalizedEmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNormalizedEmail, v))
}

// EmailConfirmedEQ applies the EQ predicate on the "email_confirmed" field.
func EmailConfirmedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailConfirmed, v))
}

// EmailConfirmedNEQ applies the NEQ predicate on the "email_confirmed" field.
func EmailConfirmedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmailConfirmed, v))
}

// PasswordHashEQ applies the EQ predicate on the "password_hash" field.
func PasswordHashEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordHashNEQ applies the NEQ predicate on the "password_hash" field.
func PasswordHashNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswordHash, v))
}

// PasswordHashIn applies the In predicate on the "password_hash" field.
func PasswordHashIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPasswordHash, vs...))
}

// PasswordHashNotIn applies the NotIn predicate on the "password_hash" field.
func PasswordHashNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPasswordHash, vs...))
}

// PasswordHashGT applies the GT predicate on the "password_hash" field.
func PasswordHashGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPasswordHash, v))
}

// PasswordHashGTE applies the GTE predicate on the "password_hash" field.
func PasswordHashGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPasswordHash, v))
}

// PasswordHashLT applies the LT predicate on the "password_hash" field.
func PasswordHashLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPasswordHash, v))
}

// PasswordHashLTE applies the LTE predicate on the "password_hash" field.
func PasswordHashLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPasswordHash, v))
}

// PasswordHashContains applies the Contains predicate on the "password_hash" field.
func PasswordHashContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPasswordHash, v))
}

// PasswordHashHasPrefix applies the HasPrefix predicate on the "password_hash" field.
func PasswordHashHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPasswordHash, v))
}

// PasswordHashHasSuffix applies the HasSuffix predicate on the "password_hash" field.
func PasswordHashHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPasswordHash, v))
}

// PasswordHashEqualFold applies the EqualFold predicate on the "password_hash" field.
func PasswordHashEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPasswordHash, v))
}

// PasswordHashContainsFold applies the ContainsFold predicate on the "password_hash" field.
func PasswordHashContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPasswordHash, v))
}

// ConcurrencyStampEQ applies the EQ predicate on the "concurrency_stamp" field.
func ConcurrencyStampEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldConcurrencyStamp, v))
}

// ConcurrencyStampNEQ applies the NEQ predicate on the "concurrency_stamp" field.
func ConcurrencyStampNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldConcurrencyStamp, v))
}

// ConcurrencyStampIn applies the In predicate on the "concurrency_stamp" field.
func ConcurrencyStampIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldConcurrencyStamp, vs...))
}

// ConcurrencyStampNotIn applies the NotIn predicate on the "concurrency_stamp" field.
func ConcurrencyStampNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldConcurrencyStamp, vs...))
}

// ConcurrencyStampGT applies the GT predicate on the "concurrency_stamp" field.
func ConcurrencyStampGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldConcurrencyStamp, v))
}

// ConcurrencyStampGTE applies the GTE predicate on the "concurrency_stamp" field.
func ConcurrencyStampGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldConcurrencyStamp, v))
}

// ConcurrencyStampLT applies the LT predicate on the "concurrency_stamp" field.
func ConcurrencyStampLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldConcurrencyStamp, v))
}

// ConcurrencyStampLTE applies the LTE predicate on the "concurrency_stamp" field.
func ConcurrencyStampLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldConcurrencyStamp, v))
}

// ConcurrencyStampContains applies the Contains predicate on the "concurrency_stamp" field.
func ConcurrencyStampContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldConcurrencyStamp, v))
}

// ConcurrencyStampHasPrefix applies the HasPrefix predicate on the "concurrency_stamp" field.
func ConcurrencyStampHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldConcurrencyStamp, v))
}

// ConcurrencyStampHasSuffix applies the HasSuffix predicate on the "concurrency_stamp" field.
func ConcurrencyStampHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldConcurrencyStamp, v))
}

// ConcurrencyStampIsNil applies the IsNil predicate on the "concurrency_stamp" field.
func ConcurrencyStampIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldConcurrencyStamp))
}

// ConcurrencyStampNotNil applies the NotNil predicate on the "concurrency_stamp" field.
func ConcurrencyStampNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldConcurrencyStamp))
}

// ConcurrencyStampEqualFold applies the EqualFold predicate on the "concurrency_stamp" field.
func ConcurrencyStampEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldConcurrencyStamp, v))
}

// ConcurrencyStampContainsFold applies the ContainsFold predicate on the "concurrency_stamp" field.
func ConcurrencyStampContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldConcurrencyStamp, v))
}

// SecurityStampEQ applies the EQ predicate on the "security_stamp" field.
func SecurityStampEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSecurityStamp, v))
}

// SecurityStampNEQ applies the NEQ predicate on the "security_stamp" field.
func SecurityStampNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSecurityStamp, v))
}

// SecurityStampIn applies the In predicate on the "security_stamp" field.
func SecurityStampIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSecurityStamp, vs...))
}

// SecurityStampNotIn applies the NotIn predicate on the "security_stamp" field.
func SecurityStampNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSecurityStamp, vs...))
}

// SecurityStampGT applies the GT predicate on the "security_stamp" field.
func SecurityStampGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSecurityStamp, v))
}

// SecurityStampGTE applies the GTE predicate on the "security_stamp" field.
func SecurityStampGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSecurityStamp, v))
}

// SecurityStampLT applies the LT predicate on the "security_stamp" field.
func SecurityStampLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSecurityStamp, v))
}

// SecurityStampLTE applies the LTE predicate on the "security_stamp" field.
func SecurityStampLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSecurityStamp, v))
}

// SecurityStampContains applies the Contains predicate on the "security_stamp" field.
func SecurityStampContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSecurityStamp, v))
}

// SecurityStampHasPrefix applies the HasPrefix predicate on the "security_stamp" field.
func SecurityStampHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSecurityStamp, v))
}

// SecurityStampHasSuffix applies the HasSuffix predicate on the "security_stamp" field.
func SecurityStampHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSecurityStamp, v))
}

// SecurityStampIsNil applies the IsNil predicate on the "security_stamp" field.
func SecurityStampIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldSecurityStamp))
}

// SecurityStampNotNil applies the NotNil predicate on the "security_stamp" field.
func SecurityStampNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldSecurityStamp))
}

// SecurityStampEqualFold applies the EqualFold predicate on the "security_stamp" field.
func SecurityStampEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSecurityStamp, v))
}

// SecurityStampContainsFold applies the ContainsFold predicate on the "security_stamp" field.
func SecurityStampContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSecurityStamp, v))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberIsNil applies the IsNil predicate on the "phone_number" field.
func PhoneNumberIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPhoneNumber))
}

// PhoneNumberNotNil applies the NotNil predicate on the "phone_number" field.
func PhoneNumberNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPhoneNumber))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// PhoneNumberConfirmedEQ applies the EQ predicate on the "phone_number_confirmed" field.
func PhoneNumberConfirmedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneNumberConfirmed, v))
}

// PhoneNumberConfirmedNEQ applies the NEQ predicate on the "phone_number_confirmed" field.
func PhoneNumberConfirmedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhoneNumberConfirmed, v))
}

// TwoFactorEnabledEQ applies the EQ predicate on the "two_factor_enabled" field.
func TwoFactorEnabledEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTwoFactorEnabled, v))
}

// TwoFactorEnabledNEQ applies the NEQ predicate on the "two_factor_enabled" field.
func TwoFactorEnabledNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTwoFactorEnabled, v))
}

// LockoutEnabledEQ applies the EQ predicate on the "lockout_enabled" field.
func LockoutEnabledEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLockoutEnabled, v))
}

// LockoutEnabledNEQ applies the NEQ predicate on the "lockout_enabled" field.
func LockoutEnabledNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLockoutEnabled, v))
}

// AccessFailedCountEQ applies the EQ predicate on the "access_failed_count" field.
func AccessFailedCountEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAccessFailedCount, v))
}

// AccessFailedCountNEQ applies the NEQ predicate on the "access_failed_count" field.
func AccessFailedCountNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAccessFailedCount, v))
}

// AccessFailedCountIn applies the In predicate on the "access_failed_count" field.
func AccessFailedCountIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldAccessFailedCount, vs...))
}

// AccessFailedCountNotIn applies the NotIn predicate on the "access_failed_count" field.
func AccessFailedCountNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAccessFailedCount, vs...))
}

// AccessFailedCountGT applies the GT predicate on the "access_failed_count" field.
func AccessFailedCountGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldAccessFailedCount, v))
}

// AccessFailedCountGTE applies the GTE predicate on the "access_failed_count" field.
func AccessFailedCountGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAccessFailedCount, v))
}

// AccessFailedCountLT applies the LT predicate on the "access_failed_count" field.
func AccessFailedCountLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldAccessFailedCount, v))
}

// AccessFailedCountLTE applies the LTE predicate on the "access_failed_count" field.
func AccessFailedCountLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAccessFailedCount, v))
}

// HasUserRoles applies the HasEdge predicate on the "user_roles" edge.
func HasUserRoles() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserRolesTable, UserRolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserRolesWith applies the HasEdge predicate on the "user_roles" edge with a given conditions (other predicates).
func HasUserRolesWith(preds ...predicate.UserRole) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
