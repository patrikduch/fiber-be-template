// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fiber-be-template/ent/predicate"
	"fiber-be-template/ent/user"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetNormalizedEmail sets the "normalized_email" field.
func (uu *UserUpdate) SetNormalizedEmail(s string) *UserUpdate {
	uu.mutation.SetNormalizedEmail(s)
	return uu
}

// SetNillableNormalizedEmail sets the "normalized_email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNormalizedEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetNormalizedEmail(*s)
	}
	return uu
}

// SetPasswordHash sets the "password_hash" field.
func (uu *UserUpdate) SetPasswordHash(s string) *UserUpdate {
	uu.mutation.SetPasswordHash(s)
	return uu
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordHash(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswordHash(*s)
	}
	return uu
}

// SetEmailConfirmed sets the "email_confirmed" field.
func (uu *UserUpdate) SetEmailConfirmed(b bool) *UserUpdate {
	uu.mutation.SetEmailConfirmed(b)
	return uu
}

// SetNillableEmailConfirmed sets the "email_confirmed" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailConfirmed(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEmailConfirmed(*b)
	}
	return uu
}

// SetPhoneNumberConfirmed sets the "phone_number_confirmed" field.
func (uu *UserUpdate) SetPhoneNumberConfirmed(b bool) *UserUpdate {
	uu.mutation.SetPhoneNumberConfirmed(b)
	return uu
}

// SetNillablePhoneNumberConfirmed sets the "phone_number_confirmed" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneNumberConfirmed(b *bool) *UserUpdate {
	if b != nil {
		uu.SetPhoneNumberConfirmed(*b)
	}
	return uu
}

// SetTwoFactorEnabled sets the "two_factor_enabled" field.
func (uu *UserUpdate) SetTwoFactorEnabled(b bool) *UserUpdate {
	uu.mutation.SetTwoFactorEnabled(b)
	return uu
}

// SetNillableTwoFactorEnabled sets the "two_factor_enabled" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTwoFactorEnabled(b *bool) *UserUpdate {
	if b != nil {
		uu.SetTwoFactorEnabled(*b)
	}
	return uu
}

// SetLockoutEnabled sets the "lockout_enabled" field.
func (uu *UserUpdate) SetLockoutEnabled(b bool) *UserUpdate {
	uu.mutation.SetLockoutEnabled(b)
	return uu
}

// SetNillableLockoutEnabled sets the "lockout_enabled" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLockoutEnabled(b *bool) *UserUpdate {
	if b != nil {
		uu.SetLockoutEnabled(*b)
	}
	return uu
}

// SetAccessFailedCount sets the "access_failed_count" field.
func (uu *UserUpdate) SetAccessFailedCount(i int) *UserUpdate {
	uu.mutation.ResetAccessFailedCount()
	uu.mutation.SetAccessFailedCount(i)
	return uu
}

// SetNillableAccessFailedCount sets the "access_failed_count" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAccessFailedCount(i *int) *UserUpdate {
	if i != nil {
		uu.SetAccessFailedCount(*i)
	}
	return uu
}

// AddAccessFailedCount adds i to the "access_failed_count" field.
func (uu *UserUpdate) AddAccessFailedCount(i int) *UserUpdate {
	uu.mutation.AddAccessFailedCount(i)
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.NormalizedEmail(); ok {
		if err := user.NormalizedEmailValidator(v); err != nil {
			return &ValidationError{Name: "normalized_email", err: fmt.Errorf(`ent: validator failed for field "User.normalized_email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.NormalizedEmail(); ok {
		_spec.SetField(user.FieldNormalizedEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := uu.mutation.EmailConfirmed(); ok {
		_spec.SetField(user.FieldEmailConfirmed, field.TypeBool, value)
	}
	if value, ok := uu.mutation.PhoneNumberConfirmed(); ok {
		_spec.SetField(user.FieldPhoneNumberConfirmed, field.TypeBool, value)
	}
	if value, ok := uu.mutation.TwoFactorEnabled(); ok {
		_spec.SetField(user.FieldTwoFactorEnabled, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LockoutEnabled(); ok {
		_spec.SetField(user.FieldLockoutEnabled, field.TypeBool, value)
	}
	if value, ok := uu.mutation.AccessFailedCount(); ok {
		_spec.SetField(user.FieldAccessFailedCount, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedAccessFailedCount(); ok {
		_spec.AddField(user.FieldAccessFailedCount, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetNormalizedEmail sets the "normalized_email" field.
func (uuo *UserUpdateOne) SetNormalizedEmail(s string) *UserUpdateOne {
	uuo.mutation.SetNormalizedEmail(s)
	return uuo
}

// SetNillableNormalizedEmail sets the "normalized_email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNormalizedEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNormalizedEmail(*s)
	}
	return uuo
}

// SetPasswordHash sets the "password_hash" field.
func (uuo *UserUpdateOne) SetPasswordHash(s string) *UserUpdateOne {
	uuo.mutation.SetPasswordHash(s)
	return uuo
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordHash(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswordHash(*s)
	}
	return uuo
}

// SetEmailConfirmed sets the "email_confirmed" field.
func (uuo *UserUpdateOne) SetEmailConfirmed(b bool) *UserUpdateOne {
	uuo.mutation.SetEmailConfirmed(b)
	return uuo
}

// SetNillableEmailConfirmed sets the "email_confirmed" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailConfirmed(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEmailConfirmed(*b)
	}
	return uuo
}

// SetPhoneNumberConfirmed sets the "phone_number_confirmed" field.
func (uuo *UserUpdateOne) SetPhoneNumberConfirmed(b bool) *UserUpdateOne {
	uuo.mutation.SetPhoneNumberConfirmed(b)
	return uuo
}

// SetNillablePhoneNumberConfirmed sets the "phone_number_confirmed" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneNumberConfirmed(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetPhoneNumberConfirmed(*b)
	}
	return uuo
}

// SetTwoFactorEnabled sets the "two_factor_enabled" field.
func (uuo *UserUpdateOne) SetTwoFactorEnabled(b bool) *UserUpdateOne {
	uuo.mutation.SetTwoFactorEnabled(b)
	return uuo
}

// SetNillableTwoFactorEnabled sets the "two_factor_enabled" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTwoFactorEnabled(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetTwoFactorEnabled(*b)
	}
	return uuo
}

// SetLockoutEnabled sets the "lockout_enabled" field.
func (uuo *UserUpdateOne) SetLockoutEnabled(b bool) *UserUpdateOne {
	uuo.mutation.SetLockoutEnabled(b)
	return uuo
}

// SetNillableLockoutEnabled sets the "lockout_enabled" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLockoutEnabled(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetLockoutEnabled(*b)
	}
	return uuo
}

// SetAccessFailedCount sets the "access_failed_count" field.
func (uuo *UserUpdateOne) SetAccessFailedCount(i int) *UserUpdateOne {
	uuo.mutation.ResetAccessFailedCount()
	uuo.mutation.SetAccessFailedCount(i)
	return uuo
}

// SetNillableAccessFailedCount sets the "access_failed_count" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAccessFailedCount(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetAccessFailedCount(*i)
	}
	return uuo
}

// AddAccessFailedCount adds i to the "access_failed_count" field.
func (uuo *UserUpdateOne) AddAccessFailedCount(i int) *UserUpdateOne {
	uuo.mutation.AddAccessFailedCount(i)
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.NormalizedEmail(); ok {
		if err := user.NormalizedEmailValidator(v); err != nil {
			return &ValidationError{Name: "normalized_email", err: fmt.Errorf(`ent: validator failed for field "User.normalized_email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.NormalizedEmail(); ok {
		_spec.SetField(user.FieldNormalizedEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := uuo.mutation.EmailConfirmed(); ok {
		_spec.SetField(user.FieldEmailConfirmed, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.PhoneNumberConfirmed(); ok {
		_spec.SetField(user.FieldPhoneNumberConfirmed, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.TwoFactorEnabled(); ok {
		_spec.SetField(user.FieldTwoFactorEnabled, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LockoutEnabled(); ok {
		_spec.SetField(user.FieldLockoutEnabled, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.AccessFailedCount(); ok {
		_spec.SetField(user.FieldAccessFailedCount, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedAccessFailedCount(); ok {
		_spec.AddField(user.FieldAccessFailedCount, field.TypeInt, value)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
