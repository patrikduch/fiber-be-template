// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fiber-be-template/ent/user"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetNormalizedEmail sets the "normalized_email" field.
func (uc *UserCreate) SetNormalizedEmail(s string) *UserCreate {
	uc.mutation.SetNormalizedEmail(s)
	return uc
}

// SetPasswordHash sets the "password_hash" field.
func (uc *UserCreate) SetPasswordHash(s string) *UserCreate {
	uc.mutation.SetPasswordHash(s)
	return uc
}

// SetEmailConfirmed sets the "email_confirmed" field.
func (uc *UserCreate) SetEmailConfirmed(b bool) *UserCreate {
	uc.mutation.SetEmailConfirmed(b)
	return uc
}

// SetNillableEmailConfirmed sets the "email_confirmed" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmailConfirmed(b *bool) *UserCreate {
	if b != nil {
		uc.SetEmailConfirmed(*b)
	}
	return uc
}

// SetPhoneNumberConfirmed sets the "phone_number_confirmed" field.
func (uc *UserCreate) SetPhoneNumberConfirmed(b bool) *UserCreate {
	uc.mutation.SetPhoneNumberConfirmed(b)
	return uc
}

// SetNillablePhoneNumberConfirmed sets the "phone_number_confirmed" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhoneNumberConfirmed(b *bool) *UserCreate {
	if b != nil {
		uc.SetPhoneNumberConfirmed(*b)
	}
	return uc
}

// SetTwoFactorEnabled sets the "two_factor_enabled" field.
func (uc *UserCreate) SetTwoFactorEnabled(b bool) *UserCreate {
	uc.mutation.SetTwoFactorEnabled(b)
	return uc
}

// SetNillableTwoFactorEnabled sets the "two_factor_enabled" field if the given value is not nil.
func (uc *UserCreate) SetNillableTwoFactorEnabled(b *bool) *UserCreate {
	if b != nil {
		uc.SetTwoFactorEnabled(*b)
	}
	return uc
}

// SetLockoutEnabled sets the "lockout_enabled" field.
func (uc *UserCreate) SetLockoutEnabled(b bool) *UserCreate {
	uc.mutation.SetLockoutEnabled(b)
	return uc
}

// SetNillableLockoutEnabled sets the "lockout_enabled" field if the given value is not nil.
func (uc *UserCreate) SetNillableLockoutEnabled(b *bool) *UserCreate {
	if b != nil {
		uc.SetLockoutEnabled(*b)
	}
	return uc
}

// SetAccessFailedCount sets the "access_failed_count" field.
func (uc *UserCreate) SetAccessFailedCount(i int) *UserCreate {
	uc.mutation.SetAccessFailedCount(i)
	return uc
}

// SetNillableAccessFailedCount sets the "access_failed_count" field if the given value is not nil.
func (uc *UserCreate) SetNillableAccessFailedCount(i *int) *UserCreate {
	if i != nil {
		uc.SetAccessFailedCount(*i)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uuid.UUID) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetID(*u)
	}
	return uc
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.EmailConfirmed(); !ok {
		v := user.DefaultEmailConfirmed
		uc.mutation.SetEmailConfirmed(v)
	}
	if _, ok := uc.mutation.PhoneNumberConfirmed(); !ok {
		v := user.DefaultPhoneNumberConfirmed
		uc.mutation.SetPhoneNumberConfirmed(v)
	}
	if _, ok := uc.mutation.TwoFactorEnabled(); !ok {
		v := user.DefaultTwoFactorEnabled
		uc.mutation.SetTwoFactorEnabled(v)
	}
	if _, ok := uc.mutation.LockoutEnabled(); !ok {
		v := user.DefaultLockoutEnabled
		uc.mutation.SetLockoutEnabled(v)
	}
	if _, ok := uc.mutation.AccessFailedCount(); !ok {
		v := user.DefaultAccessFailedCount
		uc.mutation.SetAccessFailedCount(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if v, ok := uc.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.NormalizedEmail(); !ok {
		return &ValidationError{Name: "normalized_email", err: errors.New(`ent: missing required field "User.normalized_email"`)}
	}
	if v, ok := uc.mutation.NormalizedEmail(); ok {
		if err := user.NormalizedEmailValidator(v); err != nil {
			return &ValidationError{Name: "normalized_email", err: fmt.Errorf(`ent: validator failed for field "User.normalized_email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.PasswordHash(); !ok {
		return &ValidationError{Name: "password_hash", err: errors.New(`ent: missing required field "User.password_hash"`)}
	}
	if v, ok := uc.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if _, ok := uc.mutation.EmailConfirmed(); !ok {
		return &ValidationError{Name: "email_confirmed", err: errors.New(`ent: missing required field "User.email_confirmed"`)}
	}
	if _, ok := uc.mutation.PhoneNumberConfirmed(); !ok {
		return &ValidationError{Name: "phone_number_confirmed", err: errors.New(`ent: missing required field "User.phone_number_confirmed"`)}
	}
	if _, ok := uc.mutation.TwoFactorEnabled(); !ok {
		return &ValidationError{Name: "two_factor_enabled", err: errors.New(`ent: missing required field "User.two_factor_enabled"`)}
	}
	if _, ok := uc.mutation.LockoutEnabled(); !ok {
		return &ValidationError{Name: "lockout_enabled", err: errors.New(`ent: missing required field "User.lockout_enabled"`)}
	}
	if _, ok := uc.mutation.AccessFailedCount(); !ok {
		return &ValidationError{Name: "access_failed_count", err: errors.New(`ent: missing required field "User.access_failed_count"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.NormalizedEmail(); ok {
		_spec.SetField(user.FieldNormalizedEmail, field.TypeString, value)
		_node.NormalizedEmail = value
	}
	if value, ok := uc.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
		_node.PasswordHash = value
	}
	if value, ok := uc.mutation.EmailConfirmed(); ok {
		_spec.SetField(user.FieldEmailConfirmed, field.TypeBool, value)
		_node.EmailConfirmed = value
	}
	if value, ok := uc.mutation.PhoneNumberConfirmed(); ok {
		_spec.SetField(user.FieldPhoneNumberConfirmed, field.TypeBool, value)
		_node.PhoneNumberConfirmed = value
	}
	if value, ok := uc.mutation.TwoFactorEnabled(); ok {
		_spec.SetField(user.FieldTwoFactorEnabled, field.TypeBool, value)
		_node.TwoFactorEnabled = value
	}
	if value, ok := uc.mutation.LockoutEnabled(); ok {
		_spec.SetField(user.FieldLockoutEnabled, field.TypeBool, value)
		_node.LockoutEnabled = value
	}
	if value, ok := uc.mutation.AccessFailedCount(); ok {
		_spec.SetField(user.FieldAccessFailedCount, field.TypeInt, value)
		_node.AccessFailedCount = value
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
