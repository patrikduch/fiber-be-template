// Code generated by ent, DO NOT EDIT.

package role

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the role type in the database.
	Label = "role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "Id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "Name"
	// FieldNormalizedName holds the string denoting the normalized_name field in the database.
	FieldNormalizedName = "NormalizedName"
	// FieldConcurrencyStamp holds the string denoting the concurrency_stamp field in the database.
	FieldConcurrencyStamp = "ConcurrencyStamp"
	// EdgeUserRoles holds the string denoting the user_roles edge name in mutations.
	EdgeUserRoles = "user_roles"
	// Table holds the table name of the role in the database.
	Table = "Role"
	// UserRolesTable is the table that holds the user_roles relation/edge.
	UserRolesTable = "UserRole"
	// UserRolesInverseTable is the table name for the UserRole entity.
	// It exists in this package in order to avoid circular dependency with the "userrole" package.
	UserRolesInverseTable = "UserRole"
	// UserRolesColumn is the table column denoting the user_roles relation/edge.
	UserRolesColumn = "RoleId"
)

// Columns holds all SQL columns for role fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldNormalizedName,
	FieldConcurrencyStamp,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// NormalizedNameValidator is a validator for the "normalized_name" field. It is called by the builders before save.
	NormalizedNameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Role queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNormalizedName orders the results by the normalized_name field.
func ByNormalizedName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNormalizedName, opts...).ToFunc()
}

// ByConcurrencyStamp orders the results by the concurrency_stamp field.
func ByConcurrencyStamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConcurrencyStamp, opts...).ToFunc()
}

// ByUserRolesCount orders the results by user_roles count.
func ByUserRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserRolesStep(), opts...)
	}
}

// ByUserRoles orders the results by user_roles terms.
func ByUserRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserRolesTable, UserRolesColumn),
	)
}
