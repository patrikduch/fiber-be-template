// Code generated by ent, DO NOT EDIT.

package role

import (
	"fiber-be-template/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldName, v))
}

// NormalizedName applies equality check predicate on the "normalized_name" field. It's identical to NormalizedNameEQ.
func NormalizedName(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldNormalizedName, v))
}

// ConcurrencyStamp applies equality check predicate on the "concurrency_stamp" field. It's identical to ConcurrencyStampEQ.
func ConcurrencyStamp(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldConcurrencyStamp, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Role {
	return predicate.Role(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Role {
	return predicate.Role(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Role {
	return predicate.Role(sql.FieldContainsFold(FieldName, v))
}

// NormalizedNameEQ applies the EQ predicate on the "normalized_name" field.
func NormalizedNameEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldNormalizedName, v))
}

// NormalizedNameNEQ applies the NEQ predicate on the "normalized_name" field.
func NormalizedNameNEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldNormalizedName, v))
}

// NormalizedNameIn applies the In predicate on the "normalized_name" field.
func NormalizedNameIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldNormalizedName, vs...))
}

// NormalizedNameNotIn applies the NotIn predicate on the "normalized_name" field.
func NormalizedNameNotIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldNormalizedName, vs...))
}

// NormalizedNameGT applies the GT predicate on the "normalized_name" field.
func NormalizedNameGT(v string) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldNormalizedName, v))
}

// NormalizedNameGTE applies the GTE predicate on the "normalized_name" field.
func NormalizedNameGTE(v string) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldNormalizedName, v))
}

// NormalizedNameLT applies the LT predicate on the "normalized_name" field.
func NormalizedNameLT(v string) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldNormalizedName, v))
}

// NormalizedNameLTE applies the LTE predicate on the "normalized_name" field.
func NormalizedNameLTE(v string) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldNormalizedName, v))
}

// NormalizedNameContains applies the Contains predicate on the "normalized_name" field.
func NormalizedNameContains(v string) predicate.Role {
	return predicate.Role(sql.FieldContains(FieldNormalizedName, v))
}

// NormalizedNameHasPrefix applies the HasPrefix predicate on the "normalized_name" field.
func NormalizedNameHasPrefix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasPrefix(FieldNormalizedName, v))
}

// NormalizedNameHasSuffix applies the HasSuffix predicate on the "normalized_name" field.
func NormalizedNameHasSuffix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasSuffix(FieldNormalizedName, v))
}

// NormalizedNameEqualFold applies the EqualFold predicate on the "normalized_name" field.
func NormalizedNameEqualFold(v string) predicate.Role {
	return predicate.Role(sql.FieldEqualFold(FieldNormalizedName, v))
}

// NormalizedNameContainsFold applies the ContainsFold predicate on the "normalized_name" field.
func NormalizedNameContainsFold(v string) predicate.Role {
	return predicate.Role(sql.FieldContainsFold(FieldNormalizedName, v))
}

// ConcurrencyStampEQ applies the EQ predicate on the "concurrency_stamp" field.
func ConcurrencyStampEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldConcurrencyStamp, v))
}

// ConcurrencyStampNEQ applies the NEQ predicate on the "concurrency_stamp" field.
func ConcurrencyStampNEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldConcurrencyStamp, v))
}

// ConcurrencyStampIn applies the In predicate on the "concurrency_stamp" field.
func ConcurrencyStampIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldConcurrencyStamp, vs...))
}

// ConcurrencyStampNotIn applies the NotIn predicate on the "concurrency_stamp" field.
func ConcurrencyStampNotIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldConcurrencyStamp, vs...))
}

// ConcurrencyStampGT applies the GT predicate on the "concurrency_stamp" field.
func ConcurrencyStampGT(v string) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldConcurrencyStamp, v))
}

// ConcurrencyStampGTE applies the GTE predicate on the "concurrency_stamp" field.
func ConcurrencyStampGTE(v string) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldConcurrencyStamp, v))
}

// ConcurrencyStampLT applies the LT predicate on the "concurrency_stamp" field.
func ConcurrencyStampLT(v string) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldConcurrencyStamp, v))
}

// ConcurrencyStampLTE applies the LTE predicate on the "concurrency_stamp" field.
func ConcurrencyStampLTE(v string) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldConcurrencyStamp, v))
}

// ConcurrencyStampContains applies the Contains predicate on the "concurrency_stamp" field.
func ConcurrencyStampContains(v string) predicate.Role {
	return predicate.Role(sql.FieldContains(FieldConcurrencyStamp, v))
}

// ConcurrencyStampHasPrefix applies the HasPrefix predicate on the "concurrency_stamp" field.
func ConcurrencyStampHasPrefix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasPrefix(FieldConcurrencyStamp, v))
}

// ConcurrencyStampHasSuffix applies the HasSuffix predicate on the "concurrency_stamp" field.
func ConcurrencyStampHasSuffix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasSuffix(FieldConcurrencyStamp, v))
}

// ConcurrencyStampIsNil applies the IsNil predicate on the "concurrency_stamp" field.
func ConcurrencyStampIsNil() predicate.Role {
	return predicate.Role(sql.FieldIsNull(FieldConcurrencyStamp))
}

// ConcurrencyStampNotNil applies the NotNil predicate on the "concurrency_stamp" field.
func ConcurrencyStampNotNil() predicate.Role {
	return predicate.Role(sql.FieldNotNull(FieldConcurrencyStamp))
}

// ConcurrencyStampEqualFold applies the EqualFold predicate on the "concurrency_stamp" field.
func ConcurrencyStampEqualFold(v string) predicate.Role {
	return predicate.Role(sql.FieldEqualFold(FieldConcurrencyStamp, v))
}

// ConcurrencyStampContainsFold applies the ContainsFold predicate on the "concurrency_stamp" field.
func ConcurrencyStampContainsFold(v string) predicate.Role {
	return predicate.Role(sql.FieldContainsFold(FieldConcurrencyStamp, v))
}

// HasUserRoles applies the HasEdge predicate on the "user_roles" edge.
func HasUserRoles() predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserRolesTable, UserRolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserRolesWith applies the HasEdge predicate on the "user_roles" edge with a given conditions (other predicates).
func HasUserRolesWith(preds ...predicate.UserRole) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := newUserRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Role) predicate.Role {
	return predicate.Role(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Role) predicate.Role {
	return predicate.Role(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Role) predicate.Role {
	return predicate.Role(sql.NotPredicates(p))
}
